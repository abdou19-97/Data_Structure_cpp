Counting how many times the number occur in an array of integers using recursion
Given an array a[] = {5,5,6,5} and the goal is to return how many time 5 occur in this array which 3.

My approach to the problem is as follow:

   1. Create a count function that takes 4 argument: a[], n, x, i, ans
        -a: represent the array
        -n: the size of the array
        -x: represent the input
        -i: the array index
        -ans: represent the output 
        
    2.In the count function apply the recursion step as follow
         I Base Case                                                                                              
            -check if the index (i) is equal to the size, then return since the array reach the limit
            -check if the array at i is equal to x, then increase the ans by 1
          II Recursion
             -Applay recursion by increasing the index by 1 each time.
       
    3. call the count function in the main.
    
    
    
 Bellow is the sudo code with the pattren
 
 count(a[], n, x, i, ans)
 {                                         a[] = {5,5,6,5}
     if(i == n) return                     x=5, i=0, ans=1, n=4 
     if(a[i] == x) ans++                   x=5, i=1, ans=2, n=4
                                           x=5, i=2, ans =2, n=4 
     //Recursioon                          x=5, i=3, ans = 3, n=4
     count(a, n, x, i+1, ans)              x=5, i = n = 4 return 
     
 }//end count
 
 int main()
 {
    a[] = {5,5,6,5}
    n = 4, i = 0, x = 5, ans = 0
    count(a, n, x, ans)
  
     
